//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/bgsegm.hpp>
#include <opencv2/core.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
#include <cstdio>
#include <memory>
#include <stdexcept>
#include <string>
#include <array>
#include <iterator>
using namespace cv;
using namespace std;
// Global variables

int totalContours=0;
RNG rng(12345);
Mat frame; //current frame
Mat blurredFrame;
Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor

int automobileCount=0;
int truckCount=0;
int busCount=0;
int minivanCount=0;

char keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bg_sub {-vid <video filename>|-img <image filename>}"                     << endl
    << "for example: ./bg_sub -vid video.avi"                                       << endl
    << "or: ./bg_sub -img /data/images/1.png"                                       << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen(cmd, "r"), pclose);
    if (!pipe) throw std::runtime_error("popen() failed!");
    while (!feof(pipe.get())) {
        if (fgets(buffer.data(), 128, pipe.get()) != nullptr)
            result += buffer.data();
    }
    return result;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    namedWindow("Frame");
    namedWindow("Region Of Interest");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
   // pMOG = bgsegm::createBackgroundSubtractorMOG(); //MOG approach

    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2]);
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo(char* videoFilename) {
    //create the capture object
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    keyboard = 0;
    vector<vector<Point> > contours;
vector<Vec4i> hierarchy;
    while( keyboard != 'q' && keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }

        //update the background model

        //get the frame number and write it on the current frame
        stringstream ss,cs,bs,vs,ts;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
             
             
       
                
        cv::Point rectVertex1(1400,500);
                cv::Point rectVertex2(1800,900);
                
          putText(frame, "Region Of Interest", Point(1400,450),
                FONT_HERSHEY_SIMPLEX, 1 , cv::Scalar(0,0,255),3);  

        rectangle (frame, rectVertex1, rectVertex2,
                  cv::Scalar(0,0,255),8, 0); 
        
         Rect recty (rectVertex1, rectVertex2);
         
                cv:Scalar black(0,0,0);
                
                cs << automobileCount;
                
                putText(frame, "AUTOMOBILE:" + cs.str(), cv::Point(1500,40),
                FONT_HERSHEY_SIMPLEX, 1 , black,2);
                
                vs << minivanCount;
                
                putText(frame, "MINIVAN:" + vs.str(), cv::Point(1500,80),
                FONT_HERSHEY_SIMPLEX, 1 , black,2);
                
                ts << truckCount;
                
                putText(frame, "TRUCK:" + ts.str(), cv::Point(1500,120),
                FONT_HERSHEY_SIMPLEX, 1 , black,2);
                
                
                bs << busCount;
                
                putText(frame, "BUS:" + bs.str(), cv::Point(1500,160),
                FONT_HERSHEY_SIMPLEX, 1 , black,2);
                

                
    
        
        
        cv::Mat awesomeRoi = frame(recty);
        
        cv::Mat smallColorFrame = awesomeRoi;
        
           pMOG2->apply(awesomeRoi, fgMaskMOG2);



         int captureNum = capture.get(CAP_PROP_POS_FRAMES);
         
         if(captureNum % 30 == 0){
			 
				std:string sampling = "Sampling:" + frameNumberString;

				putText(frame, sampling.c_str(), cv::Point(15, 45),
						FONT_HERSHEY_SIMPLEX, 1 , cv::Scalar(0,0,0));
				findContours( fgMaskMOG2, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0) );


				for( int i = 0; i< contours.size(); i++ )// iterate through each contour.
				{
					Rect r = boundingRect(contours[i]);
					double tempArea = contourArea(contours[i],false);
					// estimate min 100x100
					if(tempArea > 7500){
					cout<<"Contour[" << i <<"] area: " << tempArea <<endl;
					cv::Mat roi = smallColorFrame(r);
					rectangle(fgMaskMOG2, r, Scalar(255,255,255), 2);
					//  drawContours(contourMat, contours, i, cv::Scalar(255), FILLED );
		  
					cv::imwrite("test.jpg", roi);
										
										
				     ///////////////testtt ///////////////////
									  
					std::string command = "python label_image.py --graph=/tmp/output_graph.pb --labels=//tmp/output_labels.txt --input_layer=Placeholder --output_layer=final_result --image='test.jpg'";

					std::string outputResult = exec(command.c_str());
						cout<< "Output" << outputResult  << endl;


					std::stringstream ss(outputResult);
					std::istream_iterator<std::string> begin(ss);
					std::istream_iterator<std::string> end;
					std::vector<std::string> vstrings(begin, end);
					std::copy(vstrings.begin(), vstrings.end(), std::ostream_iterator<std::string>(std::cout, "\n"));

					cout<<"First: "<< vstrings.at(0) << "Second: "<< vstrings.at(1) <<endl; 

					string msg;
					stringstream labelStr;
					if(string("m6automobile").compare(vstrings.at(0)) == 0){
					
					
					automobileCount++;
					labelStr << automobileCount;

					
					 msg="AUTOMOBILE"+ labelStr.str();
					 putText(frame, msg.c_str(), cv::Point(1500,40),
								FONT_HERSHEY_SIMPLEX, 1 , black,2);
					
					}else if(string("m6minivan").compare(vstrings.at(0)) == 0){
						
					 minivanCount++;
					 labelStr << minivanCount;

					 msg="MINIVAN"+ labelStr.str();
					 putText(frame, msg.c_str(), cv::Point(1500,80),
								FONT_HERSHEY_SIMPLEX, 1 , black,2);
						
						
					}else if(string("m6truck").compare(vstrings.at(0)) == 0){
						
					 truckCount++;
					 labelStr << truckCount;
					 msg="TRUCK"+ labelStr.str();
					 putText(frame, msg.c_str(), cv::Point(1500,120),
								FONT_HERSHEY_SIMPLEX, 1 , black,2);	
					}else if(string("m6bus").compare(vstrings.at(0)) == 0){
						
					busCount++;
					labelStr << busCount;
					 msg="BUS"+ labelStr.str();
					 putText(frame, msg.c_str(), cv::Point(1500,160),
								FONT_HERSHEY_SIMPLEX, 1 , black,2);
					
					}
						totalContours++;
			  }


      }
  }
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("Region Of Interest", fgMaskMOG2);
        keyboard = (char)waitKey( 30 );
    }
    //delete capture object
    capture.release();
}
void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    frame = imread(fistFrameFilename);
    if(frame.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    keyboard = 0;
    while( keyboard != 'q' && keyboard != 27 ){
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
       // imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = (char)waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        frame = imread(nextFrameFilename);
        if(frame.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}
